package com.wenwo.message.redis;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

import com.google.gson.Gson;
import com.wenwo.message.constants.MessageConstants;
import com.wenwo.message.data.MessageData;
import com.wenwo.message.data.ShareData;
import com.wenwo.message.sender.MessageSender;


/**
 * redis队列读取类，目前分两个队列：message队列和share（分享/同步）队列 
 * 负责往队列里放入消息的类是：
 * @see com.wenwo.message.service.MessageServiceImpl
 * @author StanleyDing
 * @date 2013-9-19
 * @since 2.0
 * 
 * History：
 * Date,	By,		What
 * 2013-9-19,	StanleyDing, 	Create
 */
public class MessageQueueListener {
	private JedisPool messageJedisPool;
	
	private ThreadPoolTaskExecutor taskExecutor;
	private MessageSender sender;
	public void setSender(MessageSender sender) {
		this.sender = sender;
	}

	private Logger logger = LoggerFactory.getLogger(getClass());

	public void setMessageJedisPool(JedisPool messageJedisPool) {
		this.messageJedisPool = messageJedisPool;
	}

	public void init() {
		new MessagePop().start();
	}

	public ThreadPoolTaskExecutor getTaskExecutor() {
		return taskExecutor;
	}

	public void setTaskExecutor(ThreadPoolTaskExecutor taskExecutor) {
		this.taskExecutor = taskExecutor;
	}

	private class MessagePop extends Thread {
		public MessagePop() {
			super();
		}

		public void run() {
			logger.info("开始监听消息队列");

			String[] keys = new String[]{MessageConstants.MSG_QUEUE_KEY, MessageConstants.SHARE_QUEUE_KEY,MessageConstants.EXTERNAL_QUEUE_KEY};
			logger.info("监听以下队列：{}", Arrays.toString(keys));
			final Gson gson = new Gson();
			while (true) {
				Jedis jedis = null;
				try {
					jedis = messageJedisPool.getResource();
					List<String> values = jedis.brpop(10, keys);
					if (values != null) {
						final String key = values.get(0);
						final String value = values.get(1);
						logger.info("读取到数据队列“{}”的数据:“{}”", key, value);
						taskExecutor.submit(new Callable<Integer>() {
							@Override
							public Integer call() throws Exception {
								logger.info("处理消息队列{}的数据:{}", key, value);
								try {
									if(key.equals(MessageConstants.MSG_QUEUE_KEY)) {
										MessageData data = gson.fromJson(value, MessageData.class);
										sender.sendMessage(data);
									} else if(key.equals(MessageConstants.SHARE_QUEUE_KEY)) {
										ShareData data = gson.fromJson(value, ShareData.class);
										sender.share(data);
									} else if(key.equals(MessageConstants.EXTERNAL_QUEUE_KEY)){
										MessageData data = gson.fromJson(value, MessageData.class);
										sender.sendExternalMessage(data);
									}else {
									
										logger.error("错误的消息队列类型："+key);
										return 0;
									}
								} catch (Throwable e) {
									logger.error("处理"+value+"异常了", e);
								}
								return 1;
							}
						});
					}
				} catch (Exception e) {
					logger.error("从消息队列取数据失败", e);
				} finally {
					messageJedisPool.returnResource(jedis);
				}
			}
		}
	}
}
