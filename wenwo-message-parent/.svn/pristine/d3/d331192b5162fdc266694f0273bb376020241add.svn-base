package com.wenwo.message.endpoint.filter;

import java.util.Date;
import java.util.Map;

import org.apache.velocity.VelocityContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import redis.clients.jedis.ShardedJedis;
import redis.clients.jedis.ShardedJedisPool;

import com.wenwo.message.constants.MessageConstants;
import com.wenwo.message.constants.TemplateConstants;
import com.wenwo.message.request.MessageRequest;
import com.wenwo.platform.entity.doctor.DrAnswer;
import com.wenwo.platform.entity.doctor.DrQuestion;
import com.wenwo.platform.entity.doctor.DrQuestion.QuestionType;

public class DoctorSMSFilterImpl extends AbstractEndpointFilter{
	private static final Logger logger = LoggerFactory.getLogger(DoctorQuestionWeiboFilterImpl.class);
	
	
	@Autowired
	private ShardedJedisPool shardedJedisPool;
	@Override
	public boolean preHandler(MessageRequest request, Map<String, Object> preMap)
			throws Exception {
		VelocityContext context = request.getContext();
		String messageType = request.getMessageType();
		String targetId = request.getTargetUser().getId();
		if(isInTime()) {
			return true;
		}else{
			//当消息类型为新问题时，且是点对点和收费问题时（包括优惠券），则保存起来，等隔日再发
			if(messageType != null && messageType.equals("doctorNewQuestion")) { //新回答
				DrQuestion drQuestion = (DrQuestion)context.get(TemplateConstants.CONTEXT_QUESTION);
				if (drQuestion != null
						&& (drQuestion.getReward()>0)
						&& (drQuestion.getKindType().equals(QuestionType.P2P))) {
					targetId = drQuestion.getId();
					
	                saveIdToSortedSet(targetId);
				}
			} else {  //追问
				//追问也是隔日再发
				DrAnswer drAnswer = (DrAnswer)context.get(TemplateConstants.CONTEXT_ANSWER);
				if(drAnswer != null) {
					targetId = drAnswer.getId();
					saveIdToSortedSet(targetId);

				}
				
			}
			
			saveMessageToHash(targetId, messageType);
			
			return false;
		}

		
		
	}
	@SuppressWarnings("deprecation")
	private boolean isInTime() {
		//开始时间
		Date startTime = new Date();
		startTime.setHours(8);
		startTime.setMinutes(0);
		startTime.setSeconds(0);
		Long start = startTime.getTime();
		
		//结束时间
		Date endTime = new Date();
		endTime.setHours(22);
		endTime.setMinutes(0);
		endTime.setSeconds(0);
		Long end = endTime.getTime();
		
		Long now = new Date().getTime();
		if(now >start && now < end){
			return true;
		}
		return false;
	}
	
	/**
	 * 保存在sortedSet
	 * @param phone
	 */
	private void saveIdToSortedSet(String targetId){
		ShardedJedis jedis = shardedJedisPool.getResource();
		try{
			if(jedis.zrank(MessageConstants.MESSAGE_USER_SET_KEY,targetId)==null){
				jedis.zadd(MessageConstants.MESSAGE_USER_SET_KEY,System.currentTimeMillis(),targetId);
			}
			
		}finally{
			shardedJedisPool.returnResource(jedis);
		}
	}
	
	/**
	 * 保存在sortedSet
	 * @param phone
	 */
	private void saveMessageToHash(String targetId,String MessageType){
		ShardedJedis jedis = shardedJedisPool.getResource();
		try{
			Long timeTemp=System.currentTimeMillis();
			jedis.hset(MessageConstants.MESSAGE_USER_CONTENT_KEY
					+targetId ,timeTemp+"_"+targetId,MessageType);
		}finally{
			shardedJedisPool.returnResource(jedis);
		}
	}
	@Override
	public void postHandler(MessageRequest request,
			Map<String, Object> reponseMap) throws Exception {
		// TODO Auto-generated method stub
		
	}

}
